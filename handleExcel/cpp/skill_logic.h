/*
*
* Copyright 2016
* All rights reserved.
* This file is automatically generated by python script of which 
* the author is wupeng.
*
*/

#pragma once

#include <lib_file_tab_txt.h>
#include <lib_util.h>

namespace skill_logic_auto{

	struct skill_logic_cfg_t
	{
		uint32_t id;		//ID	
		uint8_t distance_type;		//战斗方式类型1近战2远程	
		uint8_t type;		//技能逻辑类型1伤害2回血3召唤4协助防御5去除debuff6去除buff7叠加效果型	
		uint8_t target;		//目标类型1自己2友方3全部敌人4非boss&英雄类型敌人	
		uint8_t target_number;		//目标数量(最大数量)	
		uint8_t center;		//技能范围基点1前排2中排3后排4全体	
		uint8_t ai;		//目标AI逻辑1优先前排2优先中排3优先后排4优先目标数量最多排5优先目标数量最多竖排11优先生命值最小12优先生命值最大21优先有buff目标22优先有debuff目标31优先肉盾32优先治疗33优先输出41释放被动的单位42触发被动的单位0无ai（随机）	
		uint8_t graphics;		//技能伤害图形1横排（X轴方向）2竖排（Y轴方向）3十字型4全体5单体0	
		uint8_t timeline_type;		//时间轴增益类型（只影响wait>com）1前进2后退	
		uint32_t timeline;		//时间轴增益数值（千分比）	
		uint8_t hurt_type;		//伤害类型1公式计算2百分比计算（伤害类型直接百分比扣血，回血类型百分比回血）3根据计数器计算	
		uint8_t caculator;		//计数器类型1自身被扣除血量2友方全体被扣除血量11敌方全体被扣除血量51调取触发技能计数器数值61制定触发器/仅伤害类型3使用/	
		uint32_t caculator_id;		//触发器绑定buffid/61类型专用/	
		std::vector<uint32_t> hurt_number;		//计算数值（千分比）	
		uint32_t role_id;		//召唤角色ID	
		uint32_t buff_id;		//BuffId	
		uint32_t buff_probability;		//buff出现概率（千分比）	
		std::vector<uint32_t> grow_control;		//成长系数控制值1时间数值（timeline）2计算数值（hurt_number）	
		uint32_t grow_coefficient;		//成长系数(千分比)	
		std::vector<std::vector<uint32_t>> ballistic;		//弹道逻辑ID	
		std::vector<uint32_t> atk_interval;		//伤害&弹道时间间隔（毫秒，1000毫秒=1秒 相对于施法动作 弹道的最后伤害核算需加上飞行时间）	
		uint32_t ballistic_effect_id;		//弹道特效id	
		uint8_t ballistic_effect_stay;		//弹道特效位于人物1脚底2身体中间3头顶	
		std::vector<uint32_t> struck_effect_id;		//受击特效id	
		uint8_t struck_effect_stay;		//受击特效位于人物1脚底2身体中间3头顶	
		uint32_t ballistic_effect_time;		//受击特效播放时长（毫秒）	
		std::vector<uint32_t> ballistic_effect_add;		//弹道特效需求效果1叠加2XX	
		std::vector<uint32_t> struck_effect_add;		//受击特效需求效果1叠加2XX	

		void load(el::lib_file_tab_txt_t& file_tab_txt, std::vector<std::string>& ref){
			std::string __str_def__;

			this->id= file_tab_txt.get_val_def("id", ref, 0);
			this->distance_type= file_tab_txt.get_val_def("distance_type", ref, 0);
			this->type= file_tab_txt.get_val_def("type", ref, 0);
			this->target= file_tab_txt.get_val_def("target", ref, 0);
			this->target_number= file_tab_txt.get_val_def("target_number", ref, 0);
			this->center= file_tab_txt.get_val_def("center", ref, 0);
			this->ai= file_tab_txt.get_val_def("ai", ref, 0);
			this->graphics= file_tab_txt.get_val_def("graphics", ref, 0);
			this->timeline_type= file_tab_txt.get_val_def("timeline_type", ref, 0);
			this->timeline= file_tab_txt.get_val_def("timeline", ref, 0);
			this->hurt_type= file_tab_txt.get_val_def("hurt_type", ref, 0);
			this->caculator= file_tab_txt.get_val_def("caculator", ref, 0);
			this->caculator_id= file_tab_txt.get_val_def("caculator_id", ref, 0);
			{
				std::string array = file_tab_txt.get_val_def("hurt_number", ref, __str_def__);
				el::g_cat_string(this->hurt_number, array, '_');
			}
			this->role_id= file_tab_txt.get_val_def("role_id", ref, 0);
			this->buff_id= file_tab_txt.get_val_def("buff_id", ref, 0);
			this->buff_probability= file_tab_txt.get_val_def("buff_probability", ref, 0);
			{
				std::string array = file_tab_txt.get_val_def("grow_control", ref, __str_def__);
				el::g_cat_string(this->grow_control, array, '_');
			}
			this->grow_coefficient= file_tab_txt.get_val_def("grow_coefficient", ref, 0);
			{
				std::string array = file_tab_txt.get_val_def("ballistic", ref, __str_def__);
				this->ballistic = el::g_cat_string<uint32_t>(array, ';', '_');
			}
			{
				std::string array = file_tab_txt.get_val_def("atk_interval", ref, __str_def__);
				el::g_cat_string(this->atk_interval, array, '_');
			}
			this->ballistic_effect_id= file_tab_txt.get_val_def("ballistic_effect_id", ref, 0);
			this->ballistic_effect_stay= file_tab_txt.get_val_def("ballistic_effect_stay", ref, 0);
			{
				std::string array = file_tab_txt.get_val_def("struck_effect_id", ref, __str_def__);
				el::g_cat_string(this->struck_effect_id, array, '_');
			}
			this->struck_effect_stay= file_tab_txt.get_val_def("struck_effect_stay", ref, 0);
			this->ballistic_effect_time= file_tab_txt.get_val_def("ballistic_effect_time", ref, 0);
			{
				std::string array = file_tab_txt.get_val_def("ballistic_effect_add", ref, __str_def__);
				el::g_cat_string(this->ballistic_effect_add, array, '_');
			}
			{
				std::string array = file_tab_txt.get_val_def("struck_effect_add", ref, __str_def__);
				el::g_cat_string(this->struck_effect_add, array, '_');
			}		
		}
	};
}
