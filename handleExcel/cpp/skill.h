/*
*
* Copyright 2016
* All rights reserved.
* This file is automatically generated by python script of which 
* the author is wupeng.
*
*/

#pragma once

#include <lib_file_tab_txt.h>
#include <lib_util.h>

namespace skill_auto{

	struct skill_cfg_t
	{
		uint32_t id;		//ID	
		uint32_t advance_id;		//进阶技能ID	
		uint32_t max_level;		//进阶（最大等级）	
		std::string name;		//技能名称	
		std::string describe;		//技能描述	
		uint32_t icon;		//技能图示	
		uint8_t type;		//技能类型1大招2主动3被动触发4被动永久	
		uint8_t trigger;		//被动触发条件（概率用千分比）11自己被攻击_0_0_触发概率12队友被攻击_0_0_触发概率13自己攻击敌人_0_0_触发概率14队友攻击敌人_0_0_触发概率21自己血量到达并低于_0_千分比_触法概率22队友血量到达并低于_0_千分比_触法概率23自己血量到达并高于_0_千分比_触法概率24队友血量到达并高于_0_千分比_触法概率31特定技能_技能ID_0_0_触发概率32特定技能逻辑类型_技能类型_0_0_触发概率41自己死亡_0_0_触发概率42队友死亡_0_0_触发概率43敌方单位死亡_0_0_触发概率51暴击触发_0_0_触发概率52未命中触发_0_0_触发概率61队友增加debuff状态_0_0_触发概率62队友增加buff状态_0_0_触发概率63敌人增加debuff状态_0_0_触发概率64敌人增加buff状态_0_0_触发概率71计数器触发_计数器id（buffid)_计数器数值_触发概率	
		uint32_t value_id;		//被动触发条件（概率用千分比）11自己被攻击_0_0_触发概率12队友被攻击_0_0_触发概率13自己攻击敌人_0_0_触发概率14队友攻击敌人_0_0_触发概率21自己血量到达并低于_0_千分比_触法概率22队友血量到达并低于_0_千分比_触法概率23自己血量到达并高于_0_千分比_触法概率24队友血量到达并高于_0_千分比_触法概率31特定技能_技能ID_0_0_触发概率32特定技能逻辑类型_技能类型_0_0_触发概率41自己死亡_0_0_触发概率42队友死亡_0_0_触发概率43敌方单位死亡_0_0_触发概率51暴击触发_0_0_触发概率52未命中触发_0_0_触发概率61队友增加debuff状态_0_0_触发概率62队友增加buff状态_0_0_触发概率63敌人增加debuff状态_0_0_触发概率64敌人增加buff状态_0_0_触发概率71计数器触发_计数器id（buffid)_计数器数值_触发概率	
		uint32_t value;		//被动触发条件（概率用千分比）11自己被攻击_0_0_触发概率12队友被攻击_0_0_触发概率13自己攻击敌人_0_0_触发概率14队友攻击敌人_0_0_触发概率21自己血量到达并低于_0_千分比_触法概率22队友血量到达并低于_0_千分比_触法概率23自己血量到达并高于_0_千分比_触法概率24队友血量到达并高于_0_千分比_触法概率31特定技能_技能ID_0_0_触发概率32特定技能逻辑类型_技能类型_0_0_触发概率41自己死亡_0_0_触发概率42队友死亡_0_0_触发概率43敌方单位死亡_0_0_触发概率51暴击触发_0_0_触发概率52未命中触发_0_0_触发概率61队友增加debuff状态_0_0_触发概率62队友增加buff状态_0_0_触发概率63敌人增加debuff状态_0_0_触发概率64敌人增加buff状态_0_0_触发概率71计数器触发_计数器id（buffid)_计数器数值_触发概率	
		uint32_t probability;		//被动触发条件（概率用千分比）11自己被攻击_0_0_触发概率12队友被攻击_0_0_触发概率13自己攻击敌人_0_0_触发概率14队友攻击敌人_0_0_触发概率21自己血量到达并低于_0_千分比_触法概率22队友血量到达并低于_0_千分比_触法概率23自己血量到达并高于_0_千分比_触法概率24队友血量到达并高于_0_千分比_触法概率31特定技能_技能ID_0_0_触发概率32特定技能逻辑类型_技能类型_0_0_触发概率41自己死亡_0_0_触发概率42队友死亡_0_0_触发概率43敌方单位死亡_0_0_触发概率51暴击触发_0_0_触发概率52未命中触发_0_0_触发概率61队友增加debuff状态_0_0_触发概率62队友增加buff状态_0_0_触发概率63敌人增加debuff状态_0_0_触发概率64敌人增加buff状态_0_0_触发概率71计数器触发_计数器id（buffid)_计数器数值_触发概率	
		uint8_t cost_type;		//技能消耗1怒气_数量（千分比）2怒气_数值3生命_数量（千分比）4XX_数量5消耗道具_数量0无消耗	
		uint32_t cost_value;		//技能消耗1怒气_数量（千分比）2怒气_数值3生命_数量（千分比）4XX_数量5消耗道具_数量0无消耗	
		std::vector<uint32_t> logic_id;		//逻辑子表ID	
		std::vector<uint32_t> logic_maybe_id;		//可能转换逻辑ID	
		uint32_t logic_probability;		//可能逻辑概率（千分比）	
		std::vector<uint32_t> grow_control;		//成长系数控制值1触发概率数值（probability）2可能逻辑概率（logic_probability）	
		uint32_t grow_coefficient;		//成长系数(千分比)	
		uint32_t music_atk_id;		//攻击音效id	
		uint32_t music_ballistic_id;		//弹道音效id	
		uint32_t music_struck_id;		//受击音效id	
		uint32_t skill_weight;		//技能权重	
		uint32_t lens;		//镜头配置id1配置12配置2	
		uint32_t ready_action_file;		//吟唱动作id	
		uint32_t ready_effect_id;		//吟唱特效id	
		std::vector<uint32_t> ready_effect_add;		//吟唱特效需求效果1叠加2XX	
		uint32_t ready_time;		//吟唱动作播放时间(毫秒 1秒=1000毫秒)	
		uint32_t action_file;		//施法动作id	
		uint32_t atk_effect_id;		//施法特效id	
		uint32_t action_time;		//施法动作播放时间(毫秒 1秒=1000毫秒)	
		uint32_t atk_effect_begin;		//施法特效起始播放秒数（相对于施法动作 毫秒）	
		uint32_t atk_effect_time;		//施法特效播放总秒数（毫秒）	
		std::vector<uint32_t> atk_effect_add;		//施法特效需求效果1叠加2XX	

		void load(el::lib_file_tab_txt_t& file_tab_txt, std::vector<std::string>& ref){
			std::string __str_def__;

			this->id= file_tab_txt.get_val_def("id", ref, 0);
			this->advance_id= file_tab_txt.get_val_def("advance_id", ref, 0);
			this->max_level= file_tab_txt.get_val_def("max_level", ref, 0);
			this->name= file_tab_txt.get_val_def("name", ref, __str_def__);
			this->describe= file_tab_txt.get_val_def("describe", ref, __str_def__);
			this->icon= file_tab_txt.get_val_def("icon", ref, 0);
			this->type= file_tab_txt.get_val_def("type", ref, 0);
			this->trigger= file_tab_txt.get_val_def("trigger", ref, 0);
			this->value_id= file_tab_txt.get_val_def("value_id", ref, 0);
			this->value= file_tab_txt.get_val_def("value", ref, 0);
			this->probability= file_tab_txt.get_val_def("probability", ref, 0);
			this->cost_type= file_tab_txt.get_val_def("cost_type", ref, 0);
			this->cost_value= file_tab_txt.get_val_def("cost_value", ref, 0);
			{
				std::string array = file_tab_txt.get_val_def("logic_id", ref, __str_def__);
				el::g_cat_string(this->logic_id, array, '_');
			}
			{
				std::string array = file_tab_txt.get_val_def("logic_maybe_id", ref, __str_def__);
				el::g_cat_string(this->logic_maybe_id, array, '_');
			}
			this->logic_probability= file_tab_txt.get_val_def("logic_probability", ref, 0);
			{
				std::string array = file_tab_txt.get_val_def("grow_control", ref, __str_def__);
				el::g_cat_string(this->grow_control, array, '_');
			}
			this->grow_coefficient= file_tab_txt.get_val_def("grow_coefficient", ref, 0);
			this->music_atk_id= file_tab_txt.get_val_def("music_atk_id", ref, 0);
			this->music_ballistic_id= file_tab_txt.get_val_def("music_ballistic_id", ref, 0);
			this->music_struck_id= file_tab_txt.get_val_def("music_struck_id", ref, 0);
			this->skill_weight= file_tab_txt.get_val_def("skill_weight", ref, 0);
			this->lens= file_tab_txt.get_val_def("lens", ref, 0);
			this->ready_action_file= file_tab_txt.get_val_def("ready_action_file", ref, 0);
			this->ready_effect_id= file_tab_txt.get_val_def("ready_effect_id", ref, 0);
			{
				std::string array = file_tab_txt.get_val_def("ready_effect_add", ref, __str_def__);
				el::g_cat_string(this->ready_effect_add, array, '_');
			}
			this->ready_time= file_tab_txt.get_val_def("ready_time", ref, 0);
			this->action_file= file_tab_txt.get_val_def("action_file", ref, 0);
			this->atk_effect_id= file_tab_txt.get_val_def("atk_effect_id", ref, 0);
			this->action_time= file_tab_txt.get_val_def("action_time", ref, 0);
			this->atk_effect_begin= file_tab_txt.get_val_def("atk_effect_begin", ref, 0);
			this->atk_effect_time= file_tab_txt.get_val_def("atk_effect_time", ref, 0);
			{
				std::string array = file_tab_txt.get_val_def("atk_effect_add", ref, __str_def__);
				el::g_cat_string(this->atk_effect_add, array, '_');
			}		
		}
	};
}
