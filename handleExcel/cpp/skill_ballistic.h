/*
*
* Copyright 2016
* All rights reserved.
* This file is automatically generated by python script of which 
* the author is wupeng.
*
*/

#pragma once

#include <lib_file_tab_txt.h>
#include <lib_util.h>

namespace skill_ballistic_auto{

	struct skill_ballistic_cfg_t
	{
		uint32_t id;		//id	
		uint8_t type;		//弹道类型1轨迹型弹道2持续连线型弹道/持续时间为buff时间或从发射到伤害核算结束时间/3原点（目标）变化弹道4xx	
		uint32_t xycoordinate_angle;		//xy坐标角度人物垂直于地面为0度逆时针旋转最大区间为360	
		uint8_t track_type;		//弹道轨迹分类1直线弹道（攻击与目标连线）2轨迹弹道（填写配置id）3环形弹道（逆时针旋转）4XX	
		uint32_t track_id;		//弹道轨迹配置文件	
		uint32_t radius;		//环形弹道半径（格子为单位）	
		uint32_t speed;		//初始速度多少格1秒	
		uint32_t end_angle;		//停滞角度相对于X轴逆时针角度正方向为0-90&270-360(只有环形弹道需要填写)	
		uint32_t track_time;		//弹道飞行轨迹时间(毫秒)	
		uint8_t collision;		//弹道是否发生碰撞1碰撞消失2碰撞穿透0不碰撞	

		void load(el::lib_file_tab_txt_t& file_tab_txt, std::vector<std::string>& ref){
			std::string __str_def__;

			this->id= file_tab_txt.get_val_def("id", ref, 0);
			this->type= file_tab_txt.get_val_def("type", ref, 0);
			this->xycoordinate_angle= file_tab_txt.get_val_def("xycoordinate_angle", ref, 0);
			this->track_type= file_tab_txt.get_val_def("track_type", ref, 0);
			this->track_id= file_tab_txt.get_val_def("track_id", ref, 0);
			this->radius= file_tab_txt.get_val_def("radius", ref, 0);
			this->speed= file_tab_txt.get_val_def("speed", ref, 0);
			this->end_angle= file_tab_txt.get_val_def("end_angle", ref, 0);
			this->track_time= file_tab_txt.get_val_def("track_time", ref, 0);
			this->collision= file_tab_txt.get_val_def("collision", ref, 0);		
		}
	};
}
