/*
*
* Copyright 2016
* All rights reserved.
* This file is automatically generated by python script of which 
* the author is wupeng.
*
*/

#pragma once

#include <lib_file_tab_txt.h>
#include <lib_util.h>

namespace skill_buff_auto{

	struct skill_buff_cfg_t
	{
		uint32_t id;		//id	
		std::string name;		//buff名称	
		uint8_t type;		//buff类型1buff2debuff3治疗型buff4伤害型debuff5永久buff（12类型持续时间后还原buff前属性，34类型buff消失不影响现有属性）	
		uint32_t continuous_time;		//持续总时间（毫秒，1000毫秒=1秒）/永久buff 填写0 /	
		uint8_t freguency;		//34类型数值触发频率	
		uint8_t effect;		//BUFF效果0无1眩晕2沉默3魅惑4吸血5共摊伤害	
		uint8_t effect_control;		//buff效果是否控制计算1是0否	
		uint8_t caculate_type;		//计算模式0无需计算1根据本身的基础数值计算2根据公式数值计算3根据收到的技能伤害比例计算	
		uint8_t basic;		//直接叠加数数值型别1血量上限2当前血量3攻击强度4防御值5XXX0无	
		uint32_t basic_permil;		//叠加数值（公式系数&千分比）	
		std::vector<uint32_t> grow_control;		//成长系数控制值1叠加属性2持续时间3xx	
		uint32_t grow_coefficient;		//成长系数(千分比&毫秒)	
		uint8_t caculator;		//计数器投放1受击打计数2标记者扣血数值0无计数器	

		void load(el::lib_file_tab_txt_t& file_tab_txt, std::vector<std::string>& ref){
			std::string __str_def__;

			this->id= file_tab_txt.get_val_def("id", ref, 0);
			this->name= file_tab_txt.get_val_def("name", ref, __str_def__);
			this->type= file_tab_txt.get_val_def("type", ref, 0);
			this->continuous_time= file_tab_txt.get_val_def("continuous_time", ref, 0);
			this->freguency= file_tab_txt.get_val_def("freguency", ref, 0);
			this->effect= file_tab_txt.get_val_def("effect", ref, 0);
			this->effect_control= file_tab_txt.get_val_def("effect_control", ref, 0);
			this->caculate_type= file_tab_txt.get_val_def("caculate_type", ref, 0);
			this->basic= file_tab_txt.get_val_def("basic", ref, 0);
			this->basic_permil= file_tab_txt.get_val_def("basic_permil", ref, 0);
			{
				std::string array = file_tab_txt.get_val_def("grow_control", ref, __str_def__);
				el::g_cat_string(this->grow_control, array, '_');
			}
			this->grow_coefficient= file_tab_txt.get_val_def("grow_coefficient", ref, 0);
			this->caculator= file_tab_txt.get_val_def("caculator", ref, 0);		
		}
	};
}
