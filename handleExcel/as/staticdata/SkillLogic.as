/*
*
* Copyright 2016
* All rights reserved.
* This file is automatically generated by python script of which 
* the author is wupeng.
*
*/
package staticdata
{
	import flash.utils.ByteArray;
	import staticdata.define.*

	public class SkillLogic extends StaticInfoBase
	{
		public var id:int;		//ID
		public var distanceType:int;		//战斗方式类型1近战2远程
		public var type:int;		//技能逻辑类型1伤害2回血3召唤4协助防御5去除debuff6去除buff7叠加效果型
		public var target:int;		//目标类型1自己2友方3全部敌人4非boss&英雄类型敌人
		public var targetNumber:int;		//目标数量(最大数量)
		public var center:int;		//技能范围基点1前排2中排3后排4全体
		public var ai:int;		//目标AI逻辑1优先前排2优先中排3优先后排4优先目标数量最多排5优先目标数量最多竖排11优先生命值最小12优先生命值最大21优先有buff目标22优先有debuff目标31优先肉盾32优先治疗33优先输出41释放被动的单位42触发被动的单位0无ai（随机）
		public var graphics:int;		//技能伤害图形1横排（X轴方向）2竖排（Y轴方向）3十字型4全体5单体0
		public var timelineType:int;		//时间轴增益类型（只影响wait>com）1前进2后退
		public var timeline:int;		//时间轴增益数值（千分比）
		public var hurtType:int;		//伤害类型1公式计算2百分比计算（伤害类型直接百分比扣血，回血类型百分比回血）3根据计数器计算
		public var caculator:int;		//计数器类型1自身被扣除血量2友方全体被扣除血量11敌方全体被扣除血量51调取触发技能计数器数值61制定触发器/仅伤害类型3使用/
		public var caculatorId:int;		//触发器绑定buffid/61类型专用/
		public var hurtNumber:Array;		//计算数值（千分比）
		public var roleId:int;		//召唤角色ID
		public var buffId:int;		//BuffId
		public var buffProbability:int;		//buff出现概率（千分比）
		public var growControl:Array;		//成长系数控制值1时间数值（timeline）2计算数值（hurt_number）
		public var growCoefficient:int;		//成长系数(千分比)
		public var ballistic:Array = [];		//弹道逻辑ID
		public var atkInterval:Array;		//伤害&弹道时间间隔（毫秒，1000毫秒=1秒 相对于施法动作 弹道的最后伤害核算需加上飞行时间）
		public var ballisticEffectId:int;		//弹道特效id
		public var ballisticEffectStay:int;		//弹道特效位于人物1脚底2身体中间3头顶
		public var struckEffectId:Array;		//受击特效id
		public var struckEffectStay:int;		//受击特效位于人物1脚底2身体中间3头顶
		public var ballisticEffectTime:int;		//受击特效播放时长（毫秒）
		public var ballisticEffectAdd:Array;		//弹道特效需求效果1叠加2XX
		public var struckEffectAdd:Array;		//受击特效需求效果1叠加2XX

		public function SkillLogic(data:ByteArray)
		{
			super(data);
			id = data.readInt();
			distanceType = data.readUnsignedByte();
			type = data.readUnsignedByte();
			target = data.readUnsignedByte();
			targetNumber = data.readUnsignedByte();
			center = data.readUnsignedByte();
			ai = data.readUnsignedByte();
			graphics = data.readUnsignedByte();
			timelineType = data.readUnsignedByte();
			timeline = data.readInt();
			hurtType = data.readUnsignedByte();
			caculator = data.readUnsignedByte();
			caculatorId = data.readInt();
			hurtNumber = data.readUTF().split("_");
			roleId = data.readInt();
			buffId = data.readInt();
			buffProbability = data.readInt();
			growControl = data.readUTF().split("_");
			growCoefficient = data.readInt();

			var array:Array = data.readUTF().split(";");
			for (var i:int = 0; i < array.length; i++)
			{
				ballistic.push(array[i].split("_"));
			}

			atkInterval = data.readUTF().split("_");
			ballisticEffectId = data.readInt();
			ballisticEffectStay = data.readUnsignedByte();
			struckEffectId = data.readUTF().split("_");
			struckEffectStay = data.readUnsignedByte();
			ballisticEffectTime = data.readInt();
			ballisticEffectAdd = data.readUTF().split("_");
			struckEffectAdd = data.readUTF().split("_");		
		}
	}
}
